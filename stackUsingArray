#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

#define MAX 20

typedef struct{
	int top;
	int elements[MAX];
}stack;

typedef enum{
	true, false
}boolean;

void createStack(stack *ps);
boolean isEmpty(stack *ps);
boolean isFull(stack *ps);
void push(stack *ps,int value);
int pop(stack *ps);
int peek(stack *ps);

void main(){


	int choice , element;
	stack s;
	createStack(&s);
	do{
	   printf("\n Option available");
	   printf("\n-------------------------");
	   printf("\n1.PUSH");
	   printf("\n2.POP");
	   printf("\n3.PEAK");
	   printf("\n4.EXIT");

	   printf("\nEnter your choice");
	   scanf("%d",&choice);

	   switch(choice){
	   case 1 :
		   if(isFull(&s)){
			printf("\nThe stack is full, press any key to continue");
			getch();
		   }
		   else{
			printf("\nEnter value");
			scanf("%d",&element);
			push(&s,element);
		   }
		   break;

	    case 2 :
		   if(isEmpty(&s)){
			printf("\nstack is empty, press any key to continue");
			getch();
		   }
		   else{
			printf("value popped %d\n",pop(&s));
			printf("\nPress ant key to continue");
			getch();
		      }
		      break;

	   case 3 :
		  if(isEmpty(&s)){
			printf("\nStack is empty, press any key to continue");
			getch();
		  }
		  else{
			printf("\nValue at top is %d",peek(&s));
			getch();
			printf("\nPress any key to continue");
		  }
		  break;
	   }

	}while(choice != 4);
}

void createStack(stack *ps){
	ps->top = -1;
}

boolean isEmpty(stack *ps){
	if(ps->top == -1)
		return true;
	else
		return false;
}
boolean isFull(stack *ps){
	if(ps->top == MAX-1)
		return true;
	else
		return false;
}

void push(stack *ps, int value){
	ps->top++;
	ps->elements [ps->top] = value;
}

int pop(stack *ps){
	int temp;
	temp = ps->elements[ps->top];
	ps->top--;
	return temp;
}

int peek(stack *ps){
	return (ps->elements[ps->top]);

}
